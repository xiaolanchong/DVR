///////////////////////////////////////////////////////////////////////////////////////////////////
// algo2_objects.h
// ---------------------
// begin     : 2006
// modified  : 24 Jan 2006
// author(s) : Albert Akhriev
// email     : Albert.Akhriev@biones.com
///////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __DEFINE_DVR_ALGO2_OBJECTS_H__
#define __DEFINE_DVR_ALGO2_OBJECTS_H__

#include "../orwell/mapimg.h"
#include "../orwell/ianalyzer.h"

namespace dvralgo2
{

///////////////////////////////////////////////////////////////////////////////////////////////////
/// \struct Object.
/// \brief  Structure keeps infromation about a moving object.
///
/// ---------------------------------------------------------------------------
/// Статус объекта:
/// status=0 - объект ещё "не существует" <br>
/// status=1 - объект в первый раз появился <br>
/// status=2 - объект на экране <br>
/// status=3 - объект временно исчез <br>
/// status=4 - объект исчез навсегда <br>
/// status=5 - фотография не прошла проверку на то, что объект в кадре (слейв промахнулся) <br>
/// status=6 - фотография прошла проверку на то, что объект в кадре <br>
/// Значения status с 0 по 4 выдает обработчик мастера, остальные - слейв.
/// ---------------------------------------------------------------------------
/// Значение ключа объекта в базе данных:
/// dbID используется как ключевое поле для объектов в базе данных.
/// dbID должен устанавливаться сразу при получении status=1 при помощи
/// функции CIAnalyzer::SetDatabaseID, в противном случае для объекта
/// с данным UID на текущем мастере номер masterID в поле dbID будет
/// возвращаться -1.
/// 
/// Значение поля dbID для данного UID может измениться. Это сигнал
/// того, что данный объект связан с объектом на другой камере, то есть
/// установлено, что в зоне пересечения двух камер находится один и тот
/// же объект. Изменившееся значение dbID является ключевым значением
/// для связанного объекта. По факту измениния данного поля можно
/// установить связь между объектами.
/// ---------------------------------------------------------------------------
//////////////////////////////////////////////////////////////////////////////////////////////////////
struct Object
{
  sint   UID;               //!< номер объекта, уникален для данного обработчика мастера
  sint   XApp, YApp;        //!< координаты появляения объекта
  sint   XDApp, YDApp;      //!< координаты исчезновения объекта
  sint   Class;             //!< индекс класса объекта (человек/машина/группа...), имя класса можно получить из функций CIAnalyzer::GetShortName и CIAnalyzer::GetFullName
  sint   Color;             //!< индекс цвета объекта
  ubyte  AvgCol[3+1];       //!< средний цвет объекта R, G, B and a byte reserved for alignment
  double Avgspeed;          //!< средняя скорость объекта в пикселах в секунду
  RECT   rect;              //!< координаты рамки объекта
  bool   holeFlag;          //!< флаг "дырки", если равен true, то объект - "дырка"
  bool   suspeciousObject;  //!< флаг "некачественного", "подозрительного" на "ложность" объекта, такие объекты нужно скрывать от пользователя и не выдывать на них тревоги
  bool   leftObjectFlag;    //!< флаг оставленного предмета, если равен true, то объект является оставленным
  bool   stoppedObjectFlag; //!< флаг остановившегося объекта, если равен true, то объект остановился
  DWORD  ExistingTime;      //!< время присутствия объекта на кадре в миллисекундах
  ulong  ExistingFrame;     //!< время присутствия объекта на кадре в кадрах
  ulong  status;            //!< статус объекта
  ulong  dbID;              //!< значение ключа объекта в базе данных

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Constructor.
  /////////////////////////////////////////////////////////////////////////////////////////////////
  Object()
  {
    memset( this, 0, sizeof(Object) );
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Function copies Orwell's structure of type 'ObjectReg' to this one.
  /////////////////////////////////////////////////////////////////////////////////////////////////
  Object & Copy( const ObjectReg & s )
  {
    UID               = s.UID;
    XApp              = s.XApp;
    YApp              = s.YApp;
    XDApp             = s.XDApp;
    YDApp             = s.YDApp;
    Class             = s.Class;
    Color             = s.Color;
    AvgCol[0]         = s.AvgCol[0];
    AvgCol[1]         = s.AvgCol[1];
    AvgCol[2]         = s.AvgCol[2];
    AvgCol[3]         = s.AvgCol[3];
    Avgspeed          = s.Avgspeed;
    rect              = s.rect;
    holeFlag          = s.holeFlag;
    suspeciousObject  = s.suspeciousObject;
    leftObjectFlag    = s.leftObjectFlag;
    stoppedObjectFlag = s.stoppedObjectFlag;
    ExistingTime      = s.ExistingTime;
    ExistingFrame     = s.ExistingFrame;
    status            = s.status;
    dbID              = s.dbID;
    return (*this);
  }
};

typedef  std::vector<dvralgo2::Object>  ObjectArr;

} // namespace dvralgo2

#endif // __DEFINE_DVR_ALGO2_OBJECTS_H__

