///////////////////////////////////////////////////////////////////////////////////////////////////
// abstract_menu.h
// ---------------------
// begin     : Sep 2005
// modified  : 30 Jan 2006
// author(s) : Albert Akhriev
// email     : Albert.Akhriev@biones.com
///////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __DEFINE_ELVEES_ABSTRACT_MENU_H__
#define __DEFINE_ELVEES_ABSTRACT_MENU_H__

namespace Elvees
{

///////////////////////////////////////////////////////////////////////////////////////////////////
/// \struct AbstractMenu.
/// \brief  AbstractMenu object defines a simple float menu.
///
/// AbstractMenu implementation includes multithreading support.
/// <pre><tt>
///  *--------*
///  | Item 1 |
///  | Item 2 |
///  | Item 3 |
///  |--------|
///  | Item 4 |
///  *--------*
/// </tt></pre>
///////////////////////////////////////////////////////////////////////////////////////////////////
class AbstractMenu
{
private:
  LONG m_lastId; //!< id of the last selected menu item or -1 if the last selected item has been processed

public:
  enum { TEXT_SIZE = ((1<<6)-1) };

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// \struct Item.
  /// \brief  Menu item.
  /////////////////////////////////////////////////////////////////////////////////////////////////
  struct Item
  {
    ubyte m_bSeparator;           //!< nonzero if menu item is separator
    ubyte m_bDisabled;            //!< nonzero if menu item is disabled
    ubyte m_bChecked;             //!< nonzero if menu item is checked
    ubyte m_reserved;             //!< reserved
    sint  m_id;                   //!< identifier of menu item or -1 if not initialized 
    TCHAR m_title[TEXT_SIZE+1];   //!< the title of menu item

    Item() { memset( this, 0, sizeof(Item) );  m_id = -1; }
  };

  typedef  std::vector<Item>  ItemArr;

  ItemArr m_items;                //!< the set of menu items

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Constructor.
  /////////////////////////////////////////////////////////////////////////////////////////////////
  AbstractMenu() : m_lastId(-1)
  {
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Function clears this object.
  /////////////////////////////////////////////////////////////////////////////////////////////////
  void Clear()
  {
    m_items.clear();
    SetSelectedItemId(-1);
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Function sets the new ID value of currently selected menu item.
  /////////////////////////////////////////////////////////////////////////////////////////////////
  void SetSelectedItemId( sint id ) const
  {
    ::InterlockedExchange( &((const_cast<AbstractMenu*>( this ))->m_lastId), (LONG)id );
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Function returns ID value of currently selected menu item.
  /////////////////////////////////////////////////////////////////////////////////////////////////
  sint GetSelectedItemId() const
  {
    return ((sint)m_lastId);
  }
};

} // namespace Elvees

#endif // __DEFINE_ELVEES_ABSTRACT_MENU_H__

