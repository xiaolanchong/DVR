///////////////////////////////////////////////////////////////////////////////////////////////////
// i_query_info.h
// ---------------------
// begin     : 2006
// modified  : 19 Jan 2006
// author(s) : Albert Akhriev
// email     : Albert.Akhriev@biones.com
///////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef __ELVEES_QUERY_INFO_INTERFACE_H__
#define __ELVEES_QUERY_INFO_INTERFACE_H__

#include "i_data_transfer.h"

namespace Elvees
{

///////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Interface class of any hall analyzer.
///////////////////////////////////////////////////////////////////////////////////////////////////
class IQueryInfo
{
public:
///////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Virtual destructor ensures safe deallocation.
///////////////////////////////////////////////////////////////////////////////////////////////////
virtual ~IQueryInfo() {}


///////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Function uploads specified data to this object.
///
/// \param  pData  pointer to the input data.
/// \return        Ok = true.
///////////////////////////////////////////////////////////////////////////////////////////////////
virtual bool SetData( const Elvees::IDataType * pData ) = 0;


///////////////////////////////////////////////////////////////////////////////////////////////////
/// \brief Function unloads specified data from this object.
///
/// \param  pData  pointer to the output (possibly resizable) data storage, say STL container.
/// \return        Ok = true.
///////////////////////////////////////////////////////////////////////////////////////////////////
virtual bool GetData( Elvees::IDataType * pData ) = 0;

};

} // namespace Elvees

#endif // __ELVEES_QUERY_INFO_INTERFACE_H__

